@page "/year"
@rendermode InteractiveServer
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json.Linq

<h3>Date Table</h3>

<div>
    <label for="yearSelect">Select Year:</label>
    <select id="yearSelect" @onchange="ChangeYear">
        @for (var year = CurrentYear; year >= CurrentYear - 4; year--)
        {
            <option value="@year">@year</option>
        }
    </select>

    <label for="countrySelect">Select Country:</label>
    <select id="countrySelect" @onchange="ChangeCountry">
        <option value="IS">Исландия</option>
        <option value="FI">Финляндия</option>
        <option value="SE">Швеция</option>
        <option value="DK">Дания</option>
        <option value="NO">Норвегия</option>
    </select>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Day of Week</th>
            <th>Is Public Holiday</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in DateItems)
        {
            <tr>
                <td>@item.Date.ToShortDateString()</td>
                <td>@item.DayOfWeek</td>
                <td>@(item.IsPublicHoliday ? item.PublicHolidayName : "")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private HttpClient _httpClient;
    private List<DateItem> DateItems = new List<DateItem>();
    private int CurrentYear => DateTime.Now.Year;
    private int SelectedYear { get; set; }
    private string SelectedCountry { get; set; } = "IS";

    protected override async Task OnInitializedAsync()
    {
        _httpClient = new HttpClient();
        SelectedYear = CurrentYear;
        await LoadData();
    }

    private async Task LoadData()
    {
        var startDate = new DateTime(SelectedYear, 1, 1);
        var endDate = new DateTime(SelectedYear, 12, 31);
        var dates = Enumerable.Range(0, (endDate - startDate).Days + 1)
                              .Select(offset => startDate.AddDays(offset));

        DateItems.Clear();

        foreach (var date in dates)
        {
            DateItems.Add(new DateItem
                {
                    Date = date,
                    DayOfWeek = date.DayOfWeek.ToString(),
                    IsPublicHoliday = false
                });
        }

        var response = await _httpClient.GetAsync($"https://date.nager.at/Api/v3/NextPublicHolidays/{SelectedCountry}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var holidays = JArray.Parse(content);
            foreach (var holiday in holidays)
            {
                var holidayDate = (DateTime)holiday["date"];
                var dateItem = DateItems.FirstOrDefault(item => item.Date.Date == holidayDate.Date);
                if (dateItem != null)
                {
                    dateItem.IsPublicHoliday = true;
                    dateItem.PublicHolidayName = (string)holiday["localName"];
                }
            }
        }
    }

    private async Task ChangeYear(ChangeEventArgs e)
    {
        SelectedYear = Convert.ToInt32(e.Value);
        await LoadData();
        Console.WriteLine($"Selected year changed to: {SelectedYear}");
        StateHasChanged();
    }

    private async Task ChangeCountry(ChangeEventArgs e)
    {
        SelectedCountry = e.Value.ToString();
        await LoadData();
        Console.WriteLine($"Selected country changed to: {SelectedCountry}");
        StateHasChanged();
    }


    public class DateItem
    {
        public DateTime Date { get; set; }
        public string DayOfWeek { get; set; }
        public bool IsPublicHoliday { get; set; }
        public string PublicHolidayName { get; set; }
    }
}
